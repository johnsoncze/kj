<?php

namespace App\Tests\Mappero;

require_once __DIR__ . "/../../bootstrap.php";

\Tester\Environment::lock("database", TEMP_TEST);

use App\Article\ArticleEntity;
use App\ArticleCategoryRelationship\ArticleCategoryRelationshipEntity;
use App\Tests\BaseTestCase;
use Ricaefeliz\Mappero\Mappero;
use Tester\Assert;


/**
 * @author Dusan Mlynarcik <dusan.mlynarcik@email.cz>
 */
class QueriesWithRelationEntity extends BaseTestCase
{


    /** @var ArticleEntity|null */
    protected $article1;

    /** @var ArticleEntity|null */
    protected $article2;

    /** @var ArticleCategoryRelationshipEntity[]|null */
    protected $articleCategoriesArticle1;

    /** @var ArticleCategoryRelationshipEntity[]|null */
    protected $articleCategoriesArticle2;



    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $article1 = new ArticleEntity();
        $article1->setLanguageId(1);
        $article1->setName("Článek pro test Mappero 1");
        $article1->setUrl("url-mappero-1");
        $article1->setIntroduction("Popis článku. 1");
        $article1->setContent("Obsah článku. 1");
        $article1->setStatus(ArticleEntity::DRAFT);

        $article2 = new ArticleEntity();
        $article2->setLanguageId(1);
        $article2->setName("Článek pro test Mappero 2");
        $article2->setUrl("url-mappero-2");
        $article2->setIntroduction("Popis článku. 2");
        $article2->setContent("Obsah článku. 2");
        $article2->setStatus(ArticleEntity::DRAFT);

        $mappero = $this->container->getByType(Mappero::class);
        $queryManager = $mappero->getQueryManager(ArticleEntity::class);

        //Save articles
        $queryManager->save([$article1, $article2]);

        //Create categories for article 1
        $articleCategoryRelationshipArticle1_1 = new ArticleCategoryRelationshipEntity();
        $articleCategoryRelationshipArticle1_1->setArticleId($article1->getId());
        $articleCategoryRelationshipArticle1_1->setArticleCategoryId(1);
        $articleCategoryRelationshipArticle1_2 = new ArticleCategoryRelationshipEntity();
        $articleCategoryRelationshipArticle1_2->setArticleId($article1->getId());
        $articleCategoryRelationshipArticle1_2->setArticleCategoryId(2);

        //Create categories for article 2
        $articleCategoryRelationshipArticle2_1 = new ArticleCategoryRelationshipEntity();
        $articleCategoryRelationshipArticle2_1->setArticleId($article2->getId());
        $articleCategoryRelationshipArticle2_1->setArticleCategoryId(1);
        $articleCategoryRelationshipArticle2_2 = new ArticleCategoryRelationshipEntity();
        $articleCategoryRelationshipArticle2_2->setArticleId($article2->getId());
        $articleCategoryRelationshipArticle2_2->setArticleCategoryId(2);

        $articleCategoriesArticle1 = [$articleCategoryRelationshipArticle1_1, $articleCategoryRelationshipArticle1_2];
        $articleCategoriesArticle2 = [$articleCategoryRelationshipArticle2_1, $articleCategoryRelationshipArticle2_2];

        //Save categories
        $categoryQueryManager = $mappero->getQueryManager(ArticleCategoryRelationshipEntity::class);
        $categoryQueryManager->save(array_merge($articleCategoriesArticle1, $articleCategoriesArticle2));

        $this->article1 = $article1;
        $this->article2 = $article2;
        $this->articleCategoriesArticle1 = $articleCategoriesArticle1;
        $this->articleCategoriesArticle2 = $articleCategoriesArticle2;
    }



    public function testLoadEntities()
    {
        $mappero = $this->container->getByType(Mappero::class);
        $queryManager = $mappero->getQueryManager(ArticleEntity::class);

        $articles = $queryManager->findBy([
            "where" => [
                ["id", "", [$this->article1->getId(), $this->article2->getId()]]
            ]
        ]);

        $article1Categories = $articles[$this->article1->getId()]->getCategories();
        $article2Categories = $articles[$this->article2->getId()]->getCategories();

        Assert::same(2, count($article1Categories));
        Assert::same(2, count($article2Categories));

        /** @var $article ArticleEntity */
        foreach ($articles as $article) {

            if (!$categories = $article->getCategories()) {
                throw new \Exception("Missing categories for entity '" . get_class($article) . "'.");
            }

            /** @var $category ArticleCategoryRelationshipEntity */
            foreach ($article->getCategories() as $key => $category) {
                Assert::type(ArticleCategoryRelationshipEntity::class, $category);
                Assert::same($article->getId(), $category->getArticleId());
                Assert::same($key, $category->getId());
            }
        }
    }



    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        $mappero = $this->container->getByType(Mappero::class);
        $queryManager = $mappero->getQueryManager(ArticleEntity::class);
        $categoryQueryManager = $mappero->getQueryManager(ArticleCategoryRelationshipEntity::class);

        //Remove articles
        $queryManager->remove([$this->article1, $this->article2]);

        //Remove categories
        $categoryQueryManager->remove(array_merge($this->articleCategoriesArticle1, $this->articleCategoriesArticle2));
    }
}

(new QueriesWithRelationEntity())->run();