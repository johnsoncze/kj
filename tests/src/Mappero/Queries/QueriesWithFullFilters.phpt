<?php

namespace App\Tests\Mappero\Queries;

require_once __DIR__ . "/../../bootstrap.php";

\Tester\Environment::lock("database", TEMP_TEST);

use App\Article\ArticleEntity;
use App\Tests\BaseTestCase;
use Ricaefeliz\Mappero\Mappero;
use Tester\Assert;


/**
 * @author Dusan Mlynarcik <dusan.mlynarcik@email.cz>
 */
class QueriesWithFullFilters extends BaseTestCase
{


    /** @var ArticleEntity|null */
    protected $article1;

    /** @var ArticleEntity|null */
    protected $article2;

    /** @var ArticleEntity|null */
    protected $article3;

    /** @var ArticleEntity|null */
    protected $article4;

    /** @var ArticleEntity|null */
    protected $article5;



    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $article1 = new ArticleEntity();
        $article1->setLanguageId(1);
        $article1->setName("Článek pro test Mappero 1");
        $article1->setUrl("url-mappero-1");
        $article1->setIntroduction("Popis článku. 1");
        $article1->setContent("Obsah článku. 1");
        $article1->setStatus(ArticleEntity::DRAFT);

        $article2 = new ArticleEntity();
        $article2->setLanguageId(1);
        $article2->setName("Článek pro test Mappero 2");
        $article2->setUrl("url-mappero-2");
        $article2->setIntroduction("Popis článku. 2");
        $article2->setContent("Obsah článku. 2");
        $article2->setStatus(ArticleEntity::DRAFT);

        $article3 = new ArticleEntity();
        $article3->setLanguageId(1);
        $article3->setName("Další článek pro test Mappero 3");
        $article3->setUrl("url-mappero-3");
        $article3->setIntroduction("Popis článku. 3");
        $article3->setContent("Obsah článku. 3");
        $article3->setStatus(ArticleEntity::DRAFT);

        $article4 = new ArticleEntity();
        $article4->setLanguageId(1);
        $article4->setName("Další článek pro test Mappero 4");
        $article4->setUrl("url-mappero-4");
        $article4->setIntroduction("Popis článku. 4");
        $article4->setContent("Obsah článku. 4");
        $article4->setStatus(ArticleEntity::DRAFT);

        $article5 = new ArticleEntity();
        $article5->setLanguageId(1);
        $article5->setName("Další článek pro test Mappero 5");
        $article5->setUrl("url-mappero-5");
        $article5->setIntroduction("Popis článku. 5");
        $article5->setContent("Obsah článku. 5");
        $article5->setStatus(ArticleEntity::DRAFT);

        $mappero = $this->container->getByType(Mappero::class);
        $queryManager = $mappero->getQueryManager(ArticleEntity::class);

        //Save test data
        $queryManager->save([$article1, $article2, $article3, $article4, $article5]);

        $this->article1 = $article1;
        $this->article2 = $article2;
        $this->article3 = $article3;
        $this->article4 = $article4;
        $this->article5 = $article5;
    }



    public function testFindBy()
    {
        $mappero = $this->container->getByType(Mappero::class);
        $queryManager = $mappero->getQueryManager(ArticleEntity::class);

        //Load data
        $articles = $queryManager->findBy([
            "where" => [
                ["name", "LIKE", "%Mappero%"],
                ["content", "!=", "Obsah článku. 2"]
            ],
            "limit" => "3",
            "offset" => "1",
            "sort" => ["id", "DESC"]
        ]);

        $expectResult = [
            $this->article4->getId() => $this->article4,
            $this->article3->getId() => $this->article3,
            $this->article1->getId() => $this->article1
        ];

        Assert::same(3, count($articles));
        Assert::same(array_keys($expectResult), array_keys($articles));
    }



    public function testFindOneBy()
    {
        $mappero = $this->container->getByType(Mappero::class);
        $queryManager = $mappero->getQueryManager(ArticleEntity::class);

        //Load data
        $article = $queryManager->findOneBy([
            "where" => [
                ["name", "LIKE", "%Mappero%"],
                ["content", "!=", "Obsah článku. 1"],
                ["content", "!=", "Obsah článku. 2"]
            ], "offset" => "1"
        ]);

        Assert::same($this->article3->getId(), $article->getId());
    }



    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        $mappero = $this->container->getByType(Mappero::class);
        $queryManager = $mappero->getQueryManager(ArticleEntity::class);

        $queryManager->remove([$this->article1, $this->article2, $this->article3, $this->article4, $this->article5]);
    }
}

(new QueriesWithFullFilters())->run();