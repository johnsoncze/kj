<?php

namespace App\Tests\ArticleCategory;

use App\ArticleCategory\ArticleCategoryEntity;
use App\ArticleCategory\ArticleCategoryFacade;
use App\ArticleCategory\ArticleCategoryFacadeFactory;
use App\ArticleCategory\ArticleCategoryRepository;
use App\ArticleCategory\ArticleCategoryRepositoryFactory;
use App\Tests\BaseTestCase;
use Tester\Assert;


require_once __DIR__ . "/../bootstrap.php";


class ArticleCategorySortTest extends BaseTestCase
{

    use ArticleCategoryTestTrait;

    /** @var ArticleCategoryFacade */
    protected $facade;

    /** @var ArticleCategoryRepository */
    protected $repository;

    /** @var ArticleCategoryEntity */
    protected $entity1;

    /** @var ArticleCategoryEntity */
    protected $entity2;

    /** @var ArticleCategoryEntity */
    protected $entity3;



    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->facade = $this->container->getByType(ArticleCategoryFacadeFactory::class)->create();
        $this->repository = $this->container->getByType(ArticleCategoryRepositoryFactory::class)->create();

        //save test categories
        $this->entity1 = $this->createTestArticleCategory();
        $this->entity1->setName('Kategorie vlastnÃ­ abc 1');
        $this->entity1->setUrl('kategorie-vlastni-abc-1');

        $this->entity2 = $this->createTestArticleCategory();
        $this->entity2->setName('Kategorie vlastnÃ­ abc 2');
        $this->entity2->setUrl('kategorie-vlastni-abc-2');

        $this->entity3 = $this->createTestArticleCategory();
        $this->entity3->setName('Kategorie vlastnÃ­ abc 3');
        $this->entity3->setUrl('kategorie-vlastni-abc-3');

        $this->saveWithoutForeignKeysCheck([$this->entity1, $this->entity2, $this->entity3], $this->repository);
    }



    public function testSaveSort()
    {
        $idOrder = [$this->entity3->getId(), $this->entity1->getId(), $this->entity2->getId()];
        $this->runDatabaseQueryWithoutForeignKeysCheck(function () use ($idOrder){
            $this->facade->sort([
                $this->entity1->getId() => $this->entity1,
                $this->entity2->getId() => $this->entity2,
                $this->entity3->getId() => $this->entity3
            ], $idOrder);
        });

        $entitiesFromDb = $this->repository->findBy([
            "where" => [
                ["id", "", [$this->entity1->getId(), $this->entity2->getId(), $this->entity3->getId()]]
            ],
            "sort" => ["sort", "ASC"]
        ]);

        Assert::same($idOrder, array_keys($entitiesFromDb));
    }



    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        $this->facade->remove($this->entity1);
        $this->facade->remove($this->entity2);
        $this->facade->remove($this->entity3);
    }
}

(new ArticleCategorySortTest())->run();