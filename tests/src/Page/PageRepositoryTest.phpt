<?php

namespace App\Tests\Page;

require_once __DIR__ . "/../bootstrap.php";

\Tester\Environment::lock("database", TEMP_TEST);

use App\NotFoundException;
use App\Page\PageEntity;
use App\Page\PageRepositoryFactory;
use App\Tests\BaseTestCase;
use Tester\Assert;


/**
 * @author Dusan Mlynarcik <dusan.mlynarcik@email.cz>
 */
class PageRepositoryTest extends BaseTestCase
{


    /** @var PageEntity|null */
    protected $page1;

    /** @var PageEntity|null */
    protected $page2;

    /** @var PageEntity|null */
    protected $page3;



    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        //Prepare data
        $page1 = new PageEntity();
        $page1->setName("Testovací výpis článků 1");
        $page1->setType(PageEntity::ARTICLES_TYPE);
        $page1->setLanguageId(1);
        $page1->setStatus(PageEntity::DRAFT);
        $page1->setUrl("testovaci-vypis-clanku1");

        $page2 = new PageEntity();
        $page2->setName("Textová stránka");
        $page2->setType(PageEntity::TEXT_TYPE);
        $page2->setLanguageId(1);
        $page2->setStatus(PageEntity::DRAFT);
        $page2->setUrl("textova-stranka-123");

        $page3 = new PageEntity();
        $page3->setName("Testovací výpis článků 1");
        $page3->setType(PageEntity::ARTICLES_TYPE);
        $page3->setLanguageId(1);
        $page3->setStatus(PageEntity::PUBLISH);
        $page3->setUrl("testovaci-vypis-clanku2");

        //Save
        $pageRepo = $this->container->getByType(PageRepositoryFactory::class)->create();
        $pageRepo->save([$page1, $page2, $page3]);

        //Set into class
        $this->page1 = $page1;
        $this->page2 = $page2;
        $this->page3 = $page3;
    }



    public function testFindByLangIdWithoutPageId()
    {
        $pageRepo = $this->container->getByType(PageRepositoryFactory::class)->create();
        $pages = $pageRepo->findByLangIdWithoutPageId(1, $this->page2->getId(), FALSE);

        Assert::same(2, count($pages));
        Assert::same([$this->page1->getId(), $this->page3->getId()], array_keys($pages));
        foreach ($pages as $page) {
            Assert::type(PageEntity::class, $page);
        }
    }



    public function testGetOneById()
    {
        $pageRepo = $this->container->getByType(PageRepositoryFactory::class)->create();
        $page = $pageRepo->getOneById($this->page1->getId(), FALSE);

        Assert::type(PageEntity::class, $page);
        Assert::exception(function () use ($pageRepo) {
            $pageRepo->getOneById($this->page1->getId());
        }, NotFoundException::class);
    }



    public function testGetOneByUrl()
    {
        $pageRepo = $this->container->getByType(PageRepositoryFactory::class)->create();
        $page = $pageRepo->getOneByUrl($this->page1->getUrl(), FALSE);

        Assert::type(PageEntity::class, $page);
        Assert::exception(function () use ($pageRepo) {
            $pageRepo->getOneByUrl($this->page1->getUrl());
        }, NotFoundException::class);
    }



    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        //Remove pages
        $pageRepo = $this->container->getByType(PageRepositoryFactory::class)->create();
        $pageRepo->remove([$this->page1, $this->page2, $this->page3]);
    }
}

(new PageRepositoryTest())->run();