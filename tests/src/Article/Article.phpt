<?php

namespace App\Tests\Article;

require_once __DIR__ . "/../bootstrap.php";

use App\Article\ArticleEntity;
use App\Article\ArticleFacade;
use App\Article\ArticleFacadeException;
use App\Article\ArticleFacadeFactory;
use App\Article\ArticleRepository;
use App\Article\ArticleRepositoryFactory;
use App\NotFoundException;
use App\Tests\BaseTestCase;
use Tester\Assert;


\Tester\Environment::lock("database", TEMP_TEST);

class Article extends BaseTestCase
{


    /** @var ArticleFacade */
    protected $facade;

    /** @var ArticleRepository */
    protected $repository;

    /** @var ArticleEntity */
    protected $article;



    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->facade = $this->container->getByType(ArticleFacadeFactory::class)->create();
        $this->repository = $this->container->getByType(ArticleRepositoryFactory::class)->create();

        //Add article
        $this->article = $this->facade->add(1, "Článek jak se patří", "Článek url", "Titulek pro seo", "Popis pro seo", null, "Toto je krátký popis článku.", "Obsah článku. Obsah článku. Obsah článku.", ArticleEntity::DRAFT);
    }



    public function testSaveSameArticle()
    {
        $facade = $this->facade;

        //Name exists
        Assert::exception(function () use ($facade) {
            $facade->add("1", $this->article->getName(), "clanek-url", "Titulek pro seo", "Popis pro seo", null, "Toto je krátký popis článku.", "Obsah článku. Obsah článku. Obsah článku.", ArticleEntity::DRAFT);
        }, ArticleFacadeException::class);
    }



    public function testGetPublishArticleSuccess()
    {
        $this->article->setStatus(ArticleEntity::PUBLISH);
        $this->facade->update($this->article);
        $article = $this->repository->getOnePublishedById($this->article->getId());

        Assert::type(ArticleEntity::class, $article);
    }



    public function testGetPublishArticleFail()
    {
        $repository = $this->repository;
        $article = $this->article;

        Assert::exception(function () use ($repository, $article) {
            $repository->getOnePublishedById($article->getId());
        }, NotFoundException::class);
    }



    public function testArticle()
    {
        /** @var $articleFromDB ArticleEntity */
        $articleFromDB = $this->repository->getOneById($this->article->getId());

        Assert::equal($this->article->getLanguageId(), $articleFromDB->getLanguageId());
        Assert::equal($this->article->getName(), $articleFromDB->getName());
        Assert::equal($this->article->getUrl(), $articleFromDB->getUrl());
        Assert::equal($this->article->getTitleSeo(), $articleFromDB->getTitleSeo());
        Assert::equal($this->article->getDescriptionSeo(), $articleFromDB->getDescriptionSeo());
        Assert::equal($this->article->getIntroduction(), $articleFromDB->getIntroduction());
        Assert::equal($this->article->getContent(), $articleFromDB->getContent());
        Assert::equal($this->article->getStatus(), $articleFromDB->getStatus());
    }



    public function testUpdate()
    {
        $this->article->setName("Článek to je ono");
        $this->article->setUrl("Nové url !");
        $this->article->setTitleSeo("Nový titulek pro seo");
        $this->article->setDescriptionSeo("Nový popis pro seo");
        $this->article->setIntroduction("Nový popis článku.");
        $this->article->setContent("Nový obsah článku.");
        $this->article->setStatus(ArticleEntity::PUBLISH);

        $this->facade->update($this->article);

        /** @var $articleFromDB ArticleEntity */
        $articleFromDB = $this->repository->getOneById($this->article->getId());

        Assert::equal($this->article->getLanguageId(), $articleFromDB->getLanguageId());
        Assert::equal($this->article->getName(), $articleFromDB->getName());
        Assert::equal("nove-url", $articleFromDB->getUrl());
        Assert::equal($this->article->getTitleSeo(), $articleFromDB->getTitleSeo());
        Assert::equal($this->article->getDescriptionSeo(), $articleFromDB->getDescriptionSeo());
        Assert::equal($this->article->getIntroduction(), $articleFromDB->getIntroduction());
        Assert::equal($this->article->getContent(), $articleFromDB->getContent());
        Assert::equal($this->article->getStatus(), $articleFromDB->getStatus());
    }



    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->facade->remove($this->article->getId());

        $repo = $this->repository;
        $article = $this->article;

        Assert::exception(function () use ($repo, $article) {
            $repo->getOneById($article->getId());
        }, NotFoundException::class);
    }


}

(new Article())->run();