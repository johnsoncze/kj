<?php

namespace App\AdminModule\Presenters;

use App\AdminModule\Components\ProductParameterSortForm\ProductParameterSortForm;
use App\AdminModule\Components\ProductParameterSortForm\ProductParameterSortFormFactory;
use App\Components\ProductParameterForm\ProductParameterForm;
use App\Components\ProductParameterForm\ProductParameterFormFactory;
use App\Components\ProductParameterList\ProductParameterList;
use App\Components\ProductParameterList\ProductParameterListFactory;
use App\ProductParameter\ProductParameterEntity;
use App\ProductParameter\ProductParameterRemoveFacadeException;
use App\ProductParameter\ProductParameterRemoveFacadeFactory;
use App\ProductParameter\ProductParameterRepositoryFactory;
use App\ProductParameterGroup\ProductParameterGroupEntity;
use App\ProductParameterGroup\ProductParameterGroupRepositoryFactory;


/**
 * @author Dusan Mlynarcik <dusan.mlynarcik@email.cz>
 *
 * @breadcrumb-nav-parent :Admin:ProductParameterGroup:default
 */
class ProductParameterPresenter extends AdminModulePresenter
{


    /** @var string */
    const GROUP_ID = "productParameterGroupId";

    /** @persistent */
    public $productParameterGroupId;

    /** @var ProductParameterFormFactory @inject */
    public $productParameterFormFactory;

    /** @var ProductParameterListFactory @inject */
    public $productParameterListFactory;

    /** @var ProductParameterSortFormFactory @inject */
    public $productParameterSortFormFactory;

    /** @var ProductParameterRemoveFacadeFactory @inject */
    public $productParameterRemoveFacadeFactory;

    /** @var ProductParameterGroupEntity|null */
    protected $productParameterGroupEntity;

    /** @var ProductParameterEntity|null */
    protected $productParameterEntity;



    public function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub

        //Check group
        $this->productParameterGroupEntity = $this->checkRequest((int)$this->getParameter(self::GROUP_ID), ProductParameterGroupRepositoryFactory::class);
        $this->template->group = $this->productParameterGroupEntity;
    }



    public function beforeRender()
    {
        parent::beforeRender();

        //Add name of group into title
        $productParameterGroup = $this->productParameterGroupEntity->getTranslation($this->translator->getLocale());
        $this->template->title .= " <small>" . $productParameterGroup->getName() . "</small>";
    }



    /**
     * @param int $id
     */
    public function actionEdit(int $id)
    {
        $this->productParameterEntity = $this->checkRequest($id, ProductParameterRepositoryFactory::class);
        $this->template->setFile(__DIR__ . "/templates/ProductParameter/add.latte");
    }



    /**
     * @param int $id
     */
    public function handleRemove(int $id)
    {
        try {
            $this->database->beginTransaction();
            $removeFacade = $this->productParameterRemoveFacadeFactory->create();
            $removeFacade->remove($id);
            $this->database->commit();

            $this->presenter->flashMessage("Parametr byl smazÃ¡n.", "success");
            $this->presenter->redirect("this");
        } catch (ProductParameterRemoveFacadeException $exception) {
            $this->database->rollBack();
            $this->presenter->flashMessage($exception->getMessage(), "danger");
        }
    }



    /**
     * @return ProductParameterForm
     */
    public function createComponentProductParameterForm() : ProductParameterForm
    {
        $form = $this->productParameterFormFactory->create();
        $form->setProductParameterGroupEntity($this->productParameterGroupEntity);
        $form->setProductParameterEntity($this->productParameterEntity);
        return $form;
    }



    /**
     * @return ProductParameterSortForm
     */
    public function createComponentProductParameterSortForm() : ProductParameterSortForm
    {
        $form = $this->productParameterSortFormFactory->create();
        $form->setProductParameterGroupEntity($this->productParameterGroupEntity);
        return $form;
    }



    /**
     * @return ProductParameterList
     */
    public function createComponentProductParameterList() : ProductParameterList
    {
        $list = $this->productParameterListFactory->create();
        $list->setProductParameterGroupEntity($this->productParameterGroupEntity);
        return $list;
    }
}